import { Random } from "../base/generators";
import type { TRGBColour, TRGBAColour, THexColour } from "../typings";

const asElementTypes = <T>(et: {
	[K in keyof T]: {
		[K2 in keyof T[K]]: TRGBColour | TRGBAColour | THexColour;
	};
}) => et;

export const palettes = {
	/**
	 * Palettes Kat came up with
	*/
	kat: {
		electricPurple : "rgb(191,0,255)",
		green0         : "rgb(89,238,89)",
		orange0        : "rgb(255,165,0)",
		petrolBlue     : "rgb(16,98,122)",
		offWhite       : "rgb(234,224,200)",
		brownA         : "#62481F",
		mycorexRed     : "rgb(255,0,0)",
		transparent    : "rgba(0,0,0,0)",
		corkBrown      : "#BB8A55",
		ochre          : "#bdb15f"
	},

	/**
	 * Generated by Coloors extension that I like
	*/
	coloors: {
		redRyb         : "#ff3a20ff",
		spaceCadet     : "#2e294eff",
		blanchedAlmond : "#ffebc6ff",
		pewterBlue     : "#7c9eb2ff",
		glossyGrape    : "#a288a6ff",
		burgundy       : "#800020"
	},

	/**
	 * Original green variations from Matrix 1
	*/
	matrix: {
		a : "rgb(13,2,8)",
		b : "rgb(0,59,0)",
		c : "rgb(0,143,17)",
		d : "rgb(0,255,65)"
	},

	/**
	 * Variation A of synthwave type outrun palette
	 */
	outrunA: {
		a : "rgb(255,108,17)",
		b : "rgb(255,56,100)",
		c : "rgb(45,226,230)",
		d : "rgb(38,20,71)",
		e : "rgb(13,2,33)"
	},

	/**
	 * Variation B of synthwave type outrun palette
	 */
	outrunB: {
		a : "rgb(2, 55, 136)",
		b : "rgb(101, 13, 137)",
		c : "rgb(146, 0, 117)",
		d : "rgb(246, 1, 157)",
		e : "rgb(212, 0, 120)"
	},

	/**
	 * Variation C of synthwave type outrun palette
	 */
	outrunC: {
		a : "rgb(36, 23, 52)",
		b : "rgb(46, 33, 87)",
		c : "rgb(253, 55, 119)",
		d : "rgb(247, 6, 207)",
		e : "rgb(253, 29, 83)"
	},

	/**
	 * Variation E of synthwave type outrun palette
	 */
	outrunD: {
		a : "rgb(249, 200, 14)",
		b : "rgb(255, 67, 101)",
		c : "rgb(84, 13, 110)",
		d : "rgb(121, 30, 148)",
		e : "rgb(84, 19, 136)"
	},

	/**
	 * Original tech & tribal colour palette
	 */
	techandtribal: {
		a : "rgb(40, 127, 241)",
		b : "rgb(247, 6, 207)",
		c : "rgb(12,20,31)",
		d : "rgb(13,2,33)",
		e : "rgb(0,255,255)"
	},
	
	/**
	 * Tron Legacy palette (original) mostly blues, blacks, whites
	 * */
	tron: {
		a : "rgb(24,202,230)",
		b : "rgb(111,195,223)",
		c : "rgb(52,96,141)",
		d : "rgb(40, 127, 241)",
		e : "rgb(5,13,16)",
		f : "rgb(13,12,28)",
		g : "rgb(12,20,31)",
		h : "rgb(223,116,12)",
		i : "rgb(255,230,77)",
		j : "rgb(216,218,231)",
		k : "rgb(221, 230, 243)",
		l : "rgb(230,255,255)"
	}
} as const;


export const GetRandomPalette = () => {
	type TGroupKeys = keyof typeof palettes;
	const GROUP_KEYS = Object.keys(palettes) as TGroupKeys[];
	const RANDOM_GROUP_KEY = GROUP_KEYS[Random.NumberBetween(0, Object.keys(palettes).length - 1)];
	const GROUP_OBJ = palettes[RANDOM_GROUP_KEY];

	type TColourKeys = keyof typeof GROUP_OBJ;
	const COLOUR_KEYS = Object.keys(GROUP_OBJ) as TColourKeys[];
	const RANDOM_COLOUR_KEY = COLOUR_KEYS[Random.NumberBetween(0, Object.keys(GROUP_OBJ).length - 1)];
	const COLOUR_OBJ = GROUP_OBJ[RANDOM_COLOUR_KEY];

	return COLOUR_OBJ;
};
